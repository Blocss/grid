@charset "UTF-8";
/*! blocss-grid v1.1.0 | MIT License | github.com/Blocss */

/*----------------------------------------------------------------------------*\
    $GRID
    Fluid and nestable grid system
\*----------------------------------------------------------------------------*/

/**
 * Example usage:
 *
<div class="grid  [grid--center|grid--right|grid--rev|grid--middle|grid--bottom|grid--narrow|grid--wide|grid--flush]">
    <div class="grid__cell  u-3-12  u-1-1--palm"></div>
    <div class="grid__cell  u-3-12  u-1-1--palm"></div>
    <div class="grid__cell  u-3-12  u-1-1--palm"></div>
    <div class="grid__cell  grid__cell--center  u-3-12  u-1-1--palm"></div>
</div>
 */

/**
 * Namespacing
 */
$blocss-grid-namespace: $blocss-namespace !default;

/**
 * Module can be disabled by switching `$blocss-use-grid` to `false`
 */
$blocss-use-grid: true !default;

/**
 * Dont't modify the following variables
 */
$blocss-grid-gutter: $blocss-space;


/**
 * Enable/disable modifiers
 */
$blocss-enable-grid-rev: false !default;
$blocss-enable-grid-right: false !default;
$blocss-enable-grid-center: false !default;
$blocss-enable-grid-middle: false !default;
$blocss-enable-grid-narrow: false !default;
$blocss-enable-grid-wide: false !default;
$blocss-enable-grid-flush: false !default;



/*  Grid Core
\*----------------------------------------------------------------------------*/

@if $blocss-use-grid == true {
/**
 * Grid container
 * Must only contain `.grid` or `.grid__cell` components as children.
 *
 * 1. Remove inter-unit whitespace that appears between `inline-block` child
 *    elements.
 * 2. Adjustment for child element margins.
 * 3. Use lists as grid
 * 4. Ensure consistent default alignment
 */
.#{$blocss-grid-namespace}grid {
    text-rendering: optimizespeed; /* 1 */
    font-size: 0; /* 1 */
    @include rem(margin-left, -($blocss-grid-gutter)); /* 2 */
    padding: 0;
    list-style: none; /* 3 */
    text-align: left; /* 4 */
}


    /**
     * Grid cells
     * No explicit width by default. Apply `.unit-x-y` classes.
     *
     * 1. Fundamentals of the non-float grid layout mechanism.
     * 2. Apply grid gutter.
     * 3. Controls vertical positioning of units.
     * 4. Keeps content correctly aligned with the grid direction.
     * 5. Reset text defaults.
     */
    .#{$blocss-grid-namespace}grid__cell {
        @include rem(padding-left, $blocss-grid-gutter);
        display: inline-block; /* 1 */
        width: 100%;
        margin: 0;
        vertical-align: top; /* 3 */
        text-align: left; /* 4 */
        @include font-size($blocss-base-font-size, false); /* 5 */
    }


    /**
     * Modifier: horizontally center one unit
     * Set a specific unit to be horizontally centered. Doesn't affect
     * any other units. Can still contain a child `grid` object.
     */
    .#{$blocss-grid-namespace}grid__cell--center {
        display: block;
        margin: 0 auto;
    }


@if $blocss-enable-grid-rev == true {

    /**
     * Modifier: Reverse grid direction
     */
    .#{$blocss-grid-namespace}grid--rev {
        direction: rtl;

        > .#{$blocss-grid-namespace}grid__cell {
            direction: ltr;
        }
    }

}


@if $blocss-enable-grid-right == true {

    /**
     * Modifyer: Grid align right
     */
    .#{$blocss-grid-namespace}grid--right {
        text-align: right;
    }

}


@if $blocss-enable-grid-center == true {

    /**
     * Modifier: horizontally center all grid units
     * Allows for automatic unit centering irrespective of the number of
     * units in the grid.
     */
    .#{$blocss-grid-namespace}grid--center {
        text-align: center;

        > .#{$blocss-grid-namespace}grid__cell {
            text-align: left;
        }
    }

}


@if $blocss-enable-grid-middle == true {

    /**
     * Modifier: align grid cells vertically
     */
    .#{$blocss-grid-namespace}grid--middle {
        > .#{$blocss-grid-namespace}grid__cell {
            vertical-align: middle;
        }
    }
    .#{$blocss-grid-namespace}grid--bottom {
        > .#{$blocss-grid-namespace}grid__cell {
            vertical-align: bottom;
        }
    }

}


@if $blocss-enable-grid-narrow == true {

    /**
     * Create grids with narrower gutters. Extends `.grid`.
     */
    .#{$blocss-grid-namespace}grid--narrow {
        @include rem(margin-left, -($blocss-grid-gutter / 2));

        > .#{$blocss-grid-namespace}grid__cell {
            @include rem(padding-left, ($blocss-grid-gutter / 2));
        }
    }

}


@if $blocss-enable-grid-wide == true {

    /**
     * Create grids with wider gutters. Extends `.grid`.
     */
    .#{$blocss-grid-namespace}grid--wide {
        @include rem(margin-left, -($blocss-grid-gutter * 2));

        > .#{$blocss-grid-namespace}grid__cell {
            @include rem(padding-left, ($blocss-grid-gutter * 2));
        }
    }

}


@if $blocss-enable-grid-flush == true {

    /**
     * Modifier: Remove gutters between columns
     */
    .#{$blocss-grid-namespace}grid--flush {
        margin: 0;

        > .#{$blocss-grid-namespace}grid__cell {
            padding: 0;
        }
    }

}

} // use-grid